//
// NewExternalEduID.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NewExternalEduID: Codable, JSONEncodable, Hashable {

    public enum Verification: String, Codable, CaseIterable {
        case geverifieerd = "Geverifieerd"
        case verifai = "Verifai"
        case decentraal = "Decentraal"
        case ongeverifieerd = "Ongeverifieerd"
    }
    public var email: String?
    public var chosenName: String
    public var firstName: String?
    public var lastNamePrefix: String?
    public var lastName: String
    /** Date of birth in the format 'yyyyMMdd' or 'yyyy-MM-dd' */
    public var dateOfBirth: String?
    public var identifier: String
    public var verification: Verification
    /** Can be initial NULL */
    public var brinCode: String?

    public init(email: String? = nil, chosenName: String, firstName: String? = nil, lastNamePrefix: String? = nil, lastName: String, dateOfBirth: String? = nil, identifier: String, verification: Verification, brinCode: String? = nil) {
        self.email = email
        self.chosenName = chosenName
        self.firstName = firstName
        self.lastNamePrefix = lastNamePrefix
        self.lastName = lastName
        self.dateOfBirth = dateOfBirth
        self.identifier = identifier
        self.verification = verification
        self.brinCode = brinCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case chosenName
        case firstName
        case lastNamePrefix
        case lastName
        case dateOfBirth
        case identifier
        case verification
        case brinCode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encode(chosenName, forKey: .chosenName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastNamePrefix, forKey: .lastNamePrefix)
        try container.encode(lastName, forKey: .lastName)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encode(identifier, forKey: .identifier)
        try container.encode(verification, forKey: .verification)
        try container.encodeIfPresent(brinCode, forKey: .brinCode)
    }
}

